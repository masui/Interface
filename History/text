<h2>文字ベースのインタフェース</h2>

 現在使われているほとんどのパソコンでは
GUI(グラフィカルユーザインタフェース)が採用されており、
ウィンドウやアイコンやメニューやポインティングデバイス(WIMP)を
使ってあらゆる操作を行なうようになっています。

GUIはMacintoshやWindows95の登場後に時間をかけて一般ユーザに浸透しましたが、
GUIが広く使われるようになる前は、
キーボードと文字端末を利用して計算機とやりとりを行なう
コマンドラインインタフェース(CLI)がインタフェースの主流でした。
CUIは広く普及していたため、
現在のMacやWindowsでもコマンドラインインタフェースが使える環境は残っており、
CLIを好んで利用する開発者もまだまだ多いようです。
(私もそのひとりなのですが)

初期の計算機は図xxxのようなコントロールパネルを持っていたようですが、
その後しばらくは
キーボードと文字表示端末を利用するCLIが
大型計算機でも小型計算機でも広く利用されていました。
大型計算機ではプログラムや計算機処理を指示するパンチカードと
呼ばれるものが利用されていたりしました。
初期のパソコンもキーボードと文字ターミナルが操作の基本になっていました。

計算機が使われるようになる以前からタイプライターが普及していたため
入力装置として自然であったことに加え、
文字列は表現力が高いために
単純な仕組みにもかかわらず複雑な入出力を利用することが可能だったからだと
思われます。

現在のMacやiPhone, AndroidなどはUnixオペレーティングシステムが基本に
なっていますが、
UnixでももともとはCLIによるユーザインタフェースの基本になっていました。

<h3>CLIの基本操作</h3>

CLIの基本操作は以下のようになっています。

<ul>
<li>ユーザ入力待ち状態になっている計算機が、入力可能であることをユーザに示す記号(プロンプト)を表示する
<li>ユーザがコマンド文字を入力してから改行キーを押す
<li>コマンド文字列を計算機が解釈して実行する
</ul>

たとえばUnixでは以下のようになります。

<ul>
<li>計算機が文字端末に"% "を表示する
<li>ユーザが"date"という文字列を入力してから改行キーを押す
<li>計算機が現在時刻を調べ、結果を文字端末に表示する
<li>計算機が文字端末に"% "を表示する
</ul>

このように、ユーザと計算機の間は文字列がやりとりされるだけというシンプルな構造になっているので
計算機プログラムの作成は楽ちんです。
実際 "date" とユーザが入力すると "date" という名前のコマンドが実行されることになりますが、
dateコマンドは 現在時刻を示す文字列出力するという処理を行なうだけです。

Unixでは計算機の処理もユーザの処理も文字列のやりとりするだけなので
両者を区別せずに使うことができます。
ユーザが"date"と入力するかわりに
"date"という文字列を出力するプログラムを使ってdateコマンドを実行することもできますし、
"date"と書いてあるテキストファイルを使ってdateコマンドを実行することもできます。
このため、CLIで使うコマンド文字列を並べるだけでそれがプログラムになってしまうといった特長があります。

標準出力 printf, scanfで作れてしまう

また、文字の入力と出力ができる文字端末さえあれば計算機を利用することができるので、
共用の大型計算機に文字端末をケーブルで接続して利用するという方法がよく使われていました。

プログラムの作成が容易であるとか、
リモートのプログラムを操作するのが簡単だとか、
他にもいろいろ利点はあるので現在でも利用されてはいるのですが、
計算機と同じレベルでコマンドを覚えておく必要があるといった問題があるので、
一般ユーザ向けのインタフェースとしては現在ほとんど使われていません。

CLIを使ってプログラム開発をする場合、
計算機と文字列のやりとりをしながらプログラムを編集する必要があります。
たとえばUnixのedコマンドを使って文字端末でCプログラムを開発するには
以下のようにプログラムを編集することになります。

<blockquote>
<pre>
% ed hello.c
hello.c: No such file or directory
i
#include <stdio.h>
main(){ printf("Hello!\n"); }
.
1
#include <stdio.h>
2
main(){ printf("Hello!\n"); }
d
i
main(){ printf("Hello, world!\n"); }
.
w
56
q
% cc hello.c
% ./a.out
Hello, world!
% 
</pre>
</blockquote>

こんな方法で大きなプログラムを作ることはほとんど不可能ですから、
CLI環境といえども「スクリーンエディタ」と呼ばれる編集システムが使われています。
UnixではviやEmacsというスクリーンエディタが古くから使われており、
今でもプログラム開発者などには人気があるようです。

スクリーンエディタでは画面の任意の位置に文字列を表示する必要があります。
たとえば計算機側プログラムから文字端末に対して
「画面の上から2行目/左から5桁目に"c"という文字を表示する」
といった指示をする必要があります。
一般的な文字端末というものは
計算機から送られてきた文字列がそのまま左から右に表示するものなので、
特別な位置に文字表示するためには
「エスケープシーケンス」という特殊な文字列を利用するのが普通です。
たとえば最も人気があった「VT100」という文字端末では、
'ESC' '[' '2' ';' '5' 'f'
という文字の列を送ることにより
カーソルを画面の上から2行目/左から5桁目に移動することができます。
これ以外にもVT100では何十種類ものシーケンスが定義されています。

計算機にリモート接続した文字端末を利用する状況においてこういう工夫が必要になるので、
自分のパソコン上でスクリーンエディタを利用するときは
エスケープシーケンスなど必要ないはずなのですが、
これを前提とした計算機プログラムがいまだに広く使われているため
文字端末をエミュレートするプログラムがいまだに使われています。
(たとえばMacのTerminal.app)

人間が計算機にコマンド文字列を送ると
計算機がコマンドを実行して結果を人間に返すというインタラクション手法は
現代的ではありませんが
場合によっては現在でも有効です。

文字列のやりとりはハードウェア的にもソフトウェア的にも実装が簡単なので
最低限のインタフェースだけ備えておきたい機器では
CLIだけ用意しておけば良いでしょう。
また、このような手法だと
ユーザの操作と計算機の動作が常に決まった順番で行なわれるため、
状態遷移の扱いが簡単です。

<p>

インターネットの基本プロトコルはCLI的なインタフェースになっています。
たとえばインターネット上のメールは
メール転送プロトコルであるSMTP(Simple Mail Transfer Protocol)によって
転送されますが、
SMTPはCLIを採用しているので、
以下のように人間が直接SMTPサーバに接続して
メール転送を依頼することが可能になっています。

<blockquote>
<pre>
% telnet smtp.example.com 25
Trying 192.0.43.10...
Connected to localhost.
Escape character is '^]'.
220 smtp.example.com ESMTP Postfix
mail from:masui@pitecan.com
250 2.1.0 Ok
rcpt to:masui@pitecan.com
250 2.1.5 Ok
data
354 End data with <CR><LF>.<CR><LF>
test
test
.
250 2.0.0 Ok: queued as 78DD08F8535
quit
221 2.0.0 Bye
Connection closed by foreign host.
% 
</pre>
</blockquote>

SMTPサーバは普通はメールサーバやメーラプログラムからアクセスするものですが、
CLIの採用のおかげでユーザが直接操作することもできるため
実験やデバッグが簡単にできるようになっています。


<!--
  文字列を入力して、リターンまたはEnterを入れると計算機に司令が飛ぶ
  それが帰ってくる
   全二重と半二重があった
   現在は半二重は想像できないかも
-->

